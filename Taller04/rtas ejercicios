1) a) la memoria es de 256 bytes (256 palabras de 8 bits)
   b) ninguna porque ya estan todas las combinaciones posibles de código de operacion siendo utilizadas 

   c)

   d) tiene un tamaño de 8 bits

   e) el IR está dividido en 2 registros de 8 bits y se encuentra conectado al bus y al decoder.

  2) 
  	a) la señal inc funciona como incrementador en 1 del PC (por cada paso del clock)
  	b) permite escribir los flags resultantes de cada operación
  	c) La instruccion en la memoria va a determinar si se prenden las señales jx_microOp y load_microOp, que son necesarias para resolver los saltos condicionales. Luego, si se cumple la condicion - es decir - si el flag x está prendido, entonces se prenden dos multiplexores. El primero suma 2 al PC y el segundo hace que esta suma pase. Para esto es necesario que esté prendido el flag de la instruccion y la señal jx_microOp. Luego, para que se actualice el PC y no se incremente en 1 es necesario que esté prendida la señal load_microOp.
  	d) ....

3) 
	b)
		JMP seguir   0x00

	    seguir:
	    SET R0, 0xFF 0x02
	    SET R1, 0x11 0x04

	    siguiente:
	    ADD R0, R1	 0x06
	    JC siguiente 0x08

	    halt:
	    JMP halt	 0x0A

	c) 30 ciclos
	d) Suma: 8 microoperaciones
	   Salto: si da verdadero hace 2 microoperaciones, caso contrario hace 0.

	e)
	JMP seguir:  4 , 2
	SET R0 0XFF: 4 , 2
	SET 21 0X11: 4 , 2
	ADD R0 R1: 4 , 5
	JC siguiente: 4, 3
	ADD R0 R1: 4 , 5
	JC siguiente: 4, 2
	JMP halt: 4, 2

	Todas las instrucciones tardan 125 ms.
	Las ejecuciones de 2 tardan 62.5 ms.
	Las ejecuciones de 3 tardan 93.75 ms.
	Las ejecuciones de 5 tardan 156.25 ms.

4)
UC
 a) no se realizarían los saltos en el PC (avanzaría siempre de a 1 palabra)
 b) siempre que el load_microOp esté encendido, el PC va a ir a la dirección 0x00
 c) lo mismo que en b, pero el PC va a la dirección 0xFF

 Decode
 a) si se corta el cable, los ultimos 8 digitos quedarían siempre en 0 y por ende las instrucciones de tipo C y D no podrán ser utilizadas.
 b) lo mismo que a)
 c) va a pasar siempre el mismo valor (0xFF) como dirección de memoria o valor inmediato.

 Memory
 a) no se va a poder acceder a la memoria
 b) siempre que este activado el enAddr, vas a acceder siempre a lo que esté en la posición 0x00
 c) lo mismo que en b pero con la posición de memoria 0xFF

 ALU
 a) la ALU no funcionaría porque no se le estaría pasando ningún valor para la operación
 b) El carry va a ser siempre 0 (por la cte 0 del multiplexor), el único flag prendido va a ser Z (siempre va a estar prendido), el resultado va a ser siempre 0 y el Registro ALU_OUT no va a guardar el resultado.
 c) el Carry va a ser siempre 0, el flag Z va a estar siempre apagado, N va a estar prendido siempre y el Registro ALU_OUT va a guardar el resultado que va a ser siempre 0xff.

PC
a) no podés cargar valores porque está roto el cable
b) no podés cargar valores porque siempre va a estar apagado el load
c) va a cargar siempre lo que esté en inValue

Registers
a) no podés ver lo que hay guardado en el Registro porque está roto el cable
b) lo mismo que en a) pero porque el enOut va a estar siempre apagado
c) va a mostrar siempre lo que hay guardado en el Registro seleccionado

microOrgaSmall
a) como el cable está cortado la UC no puede saber los flags y por lo tanto no puede realizar los saltos
b) nunca va a hacer saltos porque los flags van a estar siempre en 0
c) cuando tenga que evaluar saltos siempre los va a hacer dado que todos los flags van a estar activados

5) 
JMP subrut
subrut: 
CMP R0, 0x00
JZ halt
ADD R1, R0
SUB R0, 0X01
JMP subrut

halt:
JMP halt



